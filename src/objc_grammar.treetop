grammar Scribe
    rule interfaces_definition
       imports_definition? scribe_defaults_definition? interface_definition* <InterfacesDefinition>
    end

    rule imports_definition
        import_definition* <ImportsDefinition>
    end

    rule import_definition
        whitespace? import_keyword whitespace? import_definition_value whitespace? <ImportDefinition>
    end

    rule import_definition_value
        '"' file_path '"' <ImportDefinitionValue>  / '<' file_path '>' <ImportDefinitionValue>
    end

    rule file_path
        ( identifier '/' )* identifier ('.' identifier)? <FilePath>
    end

    rule import_keyword
        '#import' <ImportKeyword>
    end

    rule interface_definition
        scribes_definition? whitespace? interface_token whitespace identifier superclass_definition? whitespace properties_definition end_token whitespace? <InterfaceDefinition>
    end

    rule superclass_definition
        colon identifier <SuperclassDefinition>
    end

    rule identifier
        [a-zA-Z_] [a-zA-Z0-9_]* <Identifier>
    end

    rule type
        identifier type_generic_params? asterisk? <Type>
    end

    rule type_generic_params
        left_broket type (comma type)* right_broket <TypeGenericParams>
    end

    rule properties_definition
        property_definition* <PropertiesDefinition>
    end

    rule property_definition
        scribes_definition? property_token property_options? type whitespace? identifier semicolon <PropertyDefinition>
    end

    rule property_options
        left_parenthesis property_option ( comma property_option )* right_parenthesis <PropertyOptions>
    end

    rule property_option
        identifier (equals_sign identifier)? <PropertyOption>
    end

    rule interface_token
        '@interface' <InterfaceKeyword>
    end

    rule end_token
        '@end' <EndKeyword>
    end

    rule property_token
        '@property' <PropertyKeyword>
    end

    rule whitespace
        [\s\t\r\n]+ <Whitespace>
    end

    rule scribes_definition
        scribe_definition+ <ScribesDefinition>
    end

    rule scribe_defaults_definition
        scribe_default_definition+ <ScribesDefinition>
    end

    rule scribe_definition
        scribe_keyword left_parenthesis scribe_directive_group (semicolon scribe_directive_group)* right_parenthesis <ScribeDefinition>
    end

    rule scribe_default_definition
        scribe_keyword left_parenthesis scribe_default_marker scribe_directive_group (semicolon scribe_directive_group)* right_parenthesis <ScribeDefinition>
    end

    rule scribe_keyword
        'scribe' <ScribeKeyword>
    end

    rule scribe_directive_group
        identifier whitespace scribe_directive ( comma scribe_directive )* <ScribeDirectiveGroup>
    end

    rule scribe_directive
        identifier scribe_directive_parameter? <ScribeDirective>
    end

    rule scribe_directive_parameter
        equals_sign identifier scribe_directive_parameter_path? <ScribeDirectiveParameter>
    end

    rule scribe_directive_parameter_path
        in_keyword import_definition_value <ScribeDirectiveParameterPath>
    end

    rule scribe_default_marker
        default_keyword colon <ScribeDefaultsMarker>
    end

    rule default_keyword
        'default' <DefaultKeyword>
    end

    rule in_keyword
        whitespace? 'in' whitespace?
    end

    rule left_parenthesis
        whitespace? '(' whitespace? <LeftParenthesis>
    end

    rule right_parenthesis
        whitespace? ')' whitespace? <RightParenthesis>
    end

    rule left_broket
        whitespace? '<' whitespace? <LeftBroket>
    end

    rule right_broket
        whitespace? '>' whitespace? <RightBroket>
    end

    rule semicolon
        whitespace? ';' whitespace? <Semicolon>
    end

    rule colon
        whitespace? ':' whitespace? <Colon>
    end

    rule comma
        whitespace? ',' whitespace? <Comma>
    end

    rule asterisk
        whitespace? '*' whitespace? <Asterisk>
    end

    rule equals_sign
        whitespace? '=' whitespace? <EqualsSign>
    end
end