#import "{{ class.class_name }}.h"
{% if class.should_track_changes %}#import "TCTrackingChangesImplementation.h"{% endif %}
@interface {{ class.class_name }} ()

@end

@implementation {{ class.class_name }}

- (nonnull instancetype)init{{ class.prim_ctor_definition }} {
    self = [super init{{ class.parent.prim_ctor_call }}];

    if (self) { {% for property in class.immutable_own_properties %}
        {{ property.field_name }} = {% if property.copy_on_assign? %}[{{ property.name}} copy]{% else %}{{ property.name }}{% endif %};{% endfor %}
    }

    return self;
}

- (nonnull instancetype)init{{ class.copy_ctor_definition }} {
    self = [super init{{ class.parent.copy_ctor_call }}];

    if (self) { {% for property in class.immutable_own_properties %}
        {{ property.field_name }} = {% if property.copy_on_assign? %}[{{class.copy_ctor_param}}->{{ property.field_name }} copy]{% else %}{{class.copy_ctor_param}}->{{ property.field_name }}{% endif %};{% endfor %}
    }

    return self;
}
{% if class.have_mutable_version %}
- (id)mutableCopyWithZone:(NSZone *)zone {
    return [{{class.mutable_class_name}} allocWithZone:zone] init{{ class.copy_ctor_call }}];
} {% endif %}

{% for property in class.properties %}@dynamic {{ property.name }}

- ({{ property.type_qualified }}){{ property.name }} {
    return {{ property.field_name }}
}

{% endfor %}@end

{% if class.have_mutable_version %}
@interface {{ class.mutable_class_name }} () {% if class.should_track_changes %}{
    TCTrackingChangesImplementation * _Nonnull _tracker;
}{% endif %}

@end

@implementation {{ class.mutable_class_name }}
{% if class.should_track_changes %}
- (nonnull instancetype)init{{ class.prim_ctor_definition }} {
    self = [super init{{ class.prim_ctor_call }}];

    if (self) {
        _tracker = [[TCTrackingChangesImplementation alloc] init];
    }

    return self;
}

- (nonnull instancetype)init{{ class.copy_ctor_definition }} {
    self = [super init{{ class.copy_ctor_call }}];

    if (self) {
        if ([item isKindOfClass:[{{ class.mutable_class_name }} class]]) {
            _tracker = [(({{ class.mutable_class_name }} *)item)->_tracker copy];
        } else {
            _tracker = [[TCTrackingChangesImplementation alloc] init];
        }
    }

    return self;
}

- (nonnull NSArray<NSString *> *)changedKeys {
    return _tracker.changedKeys;
}
{% endif %}
{% for property in class.all_mutable_properties %}@dynamic {{ property.name }}

- (void){{ property.setter_name }}:({{ property.type_qualified }}){{ property.name }} {
    [self willChangeValueForKey:@"{{ property.name }}"];
    {{ property.field_name }} = {% if property.copy_on_assign? %}[{{ property.name}} copy]{% else %}{{ property.name }}{% endif %};
    {% if class.should_track_changes %}[_tracker keyChanged:@"{{ property.name }}" forObject:self];
    {% endif %}[self didChangeValueForKey:@"{{ property.name }}"];
}

{% endfor %}@end
{% endif %}