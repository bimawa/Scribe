/* This class is generated by ObjCTemplar, please do not modify it */

#import "{{ class.class_name }}.h"{% if class.supports_track_changes? %}
#import "TCTrackChangesImplementation.h"{% endif %}
{% for other_class in other_classes %}#import "{{ other_class }}.h"
{% endfor %}
@interface {{ class.class_name }} ()

{% if class.supports_builder? %}- (instancetype _Nonnull)initWithBuilder:({{ class.class_name }}Builder * _Nonnull)builder;
{% endif %}
@end

@implementation {{ class.class_name }}

{% if class.close_parent_ctor? %}#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"
- (instancetype _Nonnull)init{{ class.parent.prim_ctor_definition }} {
    @throw [NSException exceptionWithName:@"Forbidden" reason:@"This object have its own immutable fields" userInfo:nil];
}
#pragma clang diagnostic pop

{% endif %}- (instancetype _Nonnull)init{{ class.prim_ctor_definition }} {
    if (self = [super init{{ class.parent.prim_ctor_call }}]) { {% for property in class.own_immutable_properties %}
        {{ property.field_name }} = {% if property.copy_on_assign? %}[{{ property.name}} copy]{% else %}{{ property.name }}{% endif %};{% endfor %}
    }

    return self;
}

- (instancetype _Nonnull)init{{ class.copy_ctor_definition }} {
    if (self = [super init{{ class.parent.copy_ctor_call }}]) { {% for property in class.own_properties %}
        {{ property.field_name }} = {% if property.copy_on_assign? %}[{{class.copy_ctor_param}}->{{ property.field_name }} copy]{% else %}{{class.copy_ctor_param}}->{{ property.field_name }}{% endif %};{% endfor %}
    }

    return self;
}

{% if class.supports_builder? %}
- (instancetype _Nonnull)initWithBuilder:({{ class.class_name }}Builder * _Nonnull)builder {
    if (self = [self init{{ class.prim_ctor_call_for_builder }}]) { {% for property in class.all_mutable_properties %}
        {{ property.field_name }} = {% if property.copy_on_assign? %}[builder.{{ property.name }} copy]{% else %}builder.{{ property.name }}{% endif %};{% endfor %}
    }

    return self;
}

+ ({{ class.class_name }}Builder * _Nonnull)builder {
    return [[{{ class.class_name }}Builder alloc] init];
}
{% endif %}

{% if class.supports_mutable_copy? %}
- (id)mutableCopyWithZone:(NSZone *)zone {
    {{ class.class_name }} *item = self;
    return [[{{class.mutable_class_name}} allocWithZone:zone] init{{ class.copy_ctor_call }}];
} {% endif %}

{% for property in class.own_properties %}@dynamic {{ property.name }};

- ({{ property.type_qualified }}){{ property.name }} {
    return {{ property.field_name }};
}

{% endfor %}@end

{% if class.supports_mutable_copy? %}
@interface {{ class.mutable_class_name }} () {% if class.supports_track_changes? %}{
    TCTrackChangesImplementation * _Nonnull _tracker;
}{% endif %}

@end

@implementation {{ class.mutable_class_name }}
{% if class.supports_track_changes? %}
- (instancetype _Nonnull)init{{ class.prim_ctor_definition }} {
    if (self = [super init{{ class.prim_ctor_call }}]) {
        _tracker = [[TCTrackChangesImplementation alloc] init];
    }

    return self;
}

- (instancetype _Nonnull)init{{ class.copy_ctor_definition }} {
    if (self = [super init{{ class.copy_ctor_call }}]) {
        if ([item isKindOfClass:[{{ class.mutable_class_name }} class]]) {
            _tracker = [(({{ class.mutable_class_name }} *)item)->_tracker copy];
        } else {
            _tracker = [[TCTrackChangesImplementation alloc] init];
        }
    }

    return self;
}

- (NSArray<NSString *> * _Nonnull)changedKeys {
    return _tracker.changedKeys;
}
{% endif %}
{% for property in class.all_mutable_properties %}@dynamic {{ property.name }};

- (void){{ property.setter_name }}:({{ property.type_qualified }}){{ property.name }} {
    [self willChangeValueForKey:@"{{ property.name }}"];
    {{ property.field_name }} = {% if property.copy_on_assign? %}[{{ property.name}} copy]{% else %}{{ property.name }}{% endif %};
    {% if class.supports_track_changes? %}[_tracker keyChanged:@"{{ property.name }}" forObject:self];
    {% endif %}[self didChangeValueForKey:@"{{ property.name }}"];
}

{% endfor %}@end
{% endif %}

{% if class.supports_builder? %}
@implementation {{ class.class_name }}Builder

{% for property in class.all_properties %}@synthesize {{ property.name }} = {{ property.field_name }};

{% endfor %}- ({{ class.class_name }} * _Nonnull)build {
    return [[{{ class.class_name }} alloc] initWithBuilder:self];
}

@end
{% endif %}