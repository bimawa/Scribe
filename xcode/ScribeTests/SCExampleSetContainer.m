/* This class is generated by ObjCTemplar, please do not modify it */

#import "SCExampleSetContainer.h"
#import "SCValidator.h"
#import "SCExampleClass.h"
#import "SCExampleDeliveredClass.h"

#import "SCExampleArrayValidator.h"

@interface SCExampleSetContainer ()

+ (BOOL)_validateSet:(NSSet *)set forObject:(SCExampleSetContainer *)object error:(NSError **)error;

@end

@implementation SCExampleSetContainer

- (instancetype)init  {
    
    if (self = [super init]) { 
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}

- (instancetype)initWithExampleSetContainer:(SCExampleSetContainer * _Nonnull)exampleSetContainer  {
    NSParameterAssert(exampleSetContainer != nil);

    if (self = [super init]) { 
        _set = exampleSetContainer->_set;
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}





- (id)copyWithZone:(NSZone *)zone {
    return self;
}

- (BOOL)isImmutable {
    return YES;
}

- (id)immutableCopyWithError:(NSError **)error {
    SCExampleSetContainer *exampleSetContainer = self;
    return [[SCExampleSetContainer alloc] initWithExampleSetContainer:exampleSetContainer];
}


- (id)mutableCopyWithZone:(NSZone *)zone {
    SCExampleSetContainer *exampleSetContainer = self;
    exampleSetContainer = [[SCMutableExampleSetContainer allocWithZone:zone] initWithExampleSetContainer:exampleSetContainer];

    NSAssert(exampleSetContainer != nil, @"Internal error: object was not copied");
    return exampleSetContainer;
} 

+ (BOOL)_validateSet:(NSSet *)set forObject:(SCExampleSetContainer *)object error:(NSError **)error {
    for (NSObject<SCValidator> *validator in @[ [[SCExampleArrayValidator alloc] init],  ]) {
        if (![validator validateValue:set ofProperty:@"set" forObject:object error:error]) {
            return NO;
        }
    }
    return YES;
}



@dynamic set;

- (NSSet * _Nullable)set {
    return _set;
}

@end


@interface SCMutableExampleSetContainer () 

@end

@implementation SCMutableExampleSetContainer


- (id)copyWithZone:(NSZone *)zone {
    SCMutableExampleSetContainer *exampleSetContainer = self;
    return [[SCMutableExampleSetContainer allocWithZone:zone] initWithExampleSetContainer:exampleSetContainer];
}

- (BOOL)isImmutable {
    return NO;
}

@dynamic set;

- (void)setSet:(NSSet * _Nullable)set error:(NSError **)error{
    if (![SCExampleSetContainer _validateSet:set forObject:self error:error]) { return; }
    
    if (![_set isEqual:set]) {
        
        [self willChangeValueForKey:@"set"];
        _set = set;
        [self didChangeValueForKey:@"set"];
        
    }
}



- (void)addSetObject:(id)setObject error:(NSError **)error {
    NSMutableSet *set = [self.set mutableCopy] ?: [NSMutableSet set];
    [set addObject:setObject];
    [self setSet:set error:error];
}

- (void)removeSetObject:(id)setObject error:(NSError **)error {
    NSMutableSet *set = [self.set mutableCopy];
    [set removeObject:setObject];
    [self setSet:set error:error];
}



@end


