/* This class is generated by ObjCTemplar, please do not modify it */

#import "SCExampleClass.h"
#import "SCValidator.h"
#import "SCPropertyChangesTracker.h"
#import "SCExampleDeliveredClass.h"

@interface SCExampleClass ()

- (instancetype)initWithBuilder:(SCExampleClassBuilder *)builder error:(NSError **)error;
+ (BOOL)_validateID:(NSString *)ID forObject:(SCExampleClass *)object error:(NSError **)error;
+ (BOOL)_validateCounter:(int)counter forObject:(SCExampleClass *)object error:(NSError **)error;

@end

@implementation SCExampleClass

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"
- (instancetype)init  {
    NSAssert(NO, @"Forbidden");
    @throw [NSException exceptionWithName:@"Forbidden" reason:@"This object have its own immutable fields" userInfo:nil];
}
#pragma clang diagnostic pop

- (instancetype)initWithID:(NSString * _Nonnull)ID error:(NSError **)error  {
    if (![SCExampleClass _validateID:ID forObject:nil error:error]) { return nil; }
    
    if (self = [super init]) { 
        _ID = ID;
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}

- (instancetype)initWithExampleClass:(SCExampleClass * _Nonnull)exampleClass  {
    NSParameterAssert(exampleClass != nil);

    if (self = [super init]) { 
        _ID = exampleClass->_ID;
        _description = exampleClass->_description;
        _components = exampleClass->_components;
        _counter = exampleClass->_counter;
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}


- (instancetype)initWithCoder:(NSCoder *)decoder {
    NSError *error = nil;
    
    NSString *ID = [decoder decodeObjectForKey:@"ID"];
    
    if (self = [self initWithID:ID error:&error]) {
        _description = [decoder decodeObjectForKey:@"description"];
        _components = [decoder decodeObjectForKey:@"components"];
        _counter = [decoder decodeIntForKey:@"counter"];
        
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder {
    [encoder encodeObject:_ID forKey:@"ID"];
    [encoder encodeObject:_description forKey:@"description"];
    [encoder encodeObject:_components forKey:@"components"];
    [encoder encodeInt:_counter forKey:@"counter"];
    
}



- (instancetype _Nonnull)initWithBuilder:(SCExampleClassBuilder * _Nonnull)builder error:(NSError **)error  {
    NSParameterAssert(builder != nil);
    if (![SCExampleClass _validateID:builder.ID forObject:nil error:error]) { return nil; }
    
    if (self = [self initWithID:builder.ID error:error]) { 
        _description = builder.description;
        _components = builder.components;
        _counter = builder.counter;
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}

+ (SCExampleClassBuilder * _Nonnull)builder {
    SCExampleClassBuilder *builder = [[SCExampleClassBuilder alloc] init];

    NSAssert(builder != nil, @"Internal error: builder was not created");
    return builder;
}


- (id)copyWithZone:(NSZone *)zone {
    return self;
}


- (id)mutableCopyWithZone:(NSZone *)zone {
    SCExampleClass *exampleClass = self;
    exampleClass = [[SCMutableExampleClass allocWithZone:zone] initWithExampleClass:exampleClass];

    NSAssert(exampleClass != nil, @"Internal error: object was not copied");
    return exampleClass;
} 

+ (BOOL)_validateID:(NSString *)ID forObject:(SCExampleClass *)object error:(NSError **)error {
    for (id<SCValidator> *validator in @[ [[SCNonnullValidator alloc] init],  ]) {
        if (![validator validateValue:ID ofProperty:@"ID" forObject:object error:error]) {
            return NO;
        }
    }
    return YES;
}

+ (BOOL)_validateCounter:(int)counter forObject:(SCExampleClass *)object error:(NSError **)error {
    for (id<SCValidator> *validator in @[ [[SCNonnullValidator alloc] init],  ]) {
        if (![validator validateValue:@(counter) ofProperty:@"counter" forObject:object error:error]) {
            return NO;
        }
    }
    return YES;
}



@dynamic ID;

- (NSString * _Nonnull)ID {
    return _ID;
}

@dynamic description;

- (NSString * _Nullable)description {
    return _description;
}

@dynamic components;

- (NSArray<NSString *> * _Nonnull)components {
    return _components;
}

@dynamic counter;

- (int)counter {
    return _counter;
}

@end


@interface SCMutableExampleClass () {
    SCPropertyChangesTracker * _Nonnull _tracker;
}

@end

@implementation SCMutableExampleClass

- (instancetype _Nonnull)initWithID:(NSString * _Nonnull)ID  {
    if (self = [super initWithID:ID]) {
        _tracker = [[SCPropertyChangesTracker alloc] init];
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}

- (instancetype _Nonnull)initWithExampleClass:(SCExampleClass * _Nonnull)exampleClass  {
    NSParameterAssert(exampleClass != nil);

    if (self = [super initWithExampleClass:exampleClass]) {
        if ([exampleClass isKindOfClass:[SCMutableExampleClass class]]) {
            _tracker = [((SCMutableExampleClass *)exampleClass)->_tracker copy];
        } else {
            _tracker = [[SCPropertyChangesTracker alloc] init];
        }
    }

    NSAssert(self != nil, @"Internal error: object was not created");
    return self;
}

- (NSArray<NSString *> * _Nonnull)changedKeys {
    return _tracker.changedKeys;
}


- (id)copyWithZone:(NSZone *)zone {
    return [[self allocWithZone:zone] initWithExampleClass:exampleClass];
}

@dynamic description;

- (void)setDescription:(NSString * _Nullable)description {
    
    if (![_description isEqual:description]) {
        [_tracker beforeValue:_description willBeChangedForKey:@"description"];
        [self willChangeValueForKey:@"description"];
        _description = description;
        [self didChangeValueForKey:@"description"];
        [_tracker newValue:_description wasSetForKey:@"description"];
    }
}

@dynamic components;

- (void)setComponents:(NSArray<NSString *> * _Nonnull)components {
    
    if (![_components isEqual:components]) {
        [_tracker beforeValue:_components willBeChangedForKey:@"components"];
        [self willChangeValueForKey:@"components"];
        _components = components;
        [self didChangeValueForKey:@"components"];
        [_tracker newValue:_components wasSetForKey:@"components"];
    }
}

@dynamic counter;

- (void)setCounter:(int)counter error:(NSError **)error{
    if (![SCExampleClass _validateCounter:counter error:error]) { return; }
    
    if (_counter != counter) {
        [_tracker beforeValue:@(_counter) willBeChangedForKey:@"counter"];
        [self willChangeValueForKey:@"counter"];
        _counter = counter;
        [self didChangeValueForKey:@"counter"];
        [_tracker newValue:@(_counter) wasSetForKey:@"counter"];
    }
}

@end



@implementation SCExampleClassBuilder

@synthesize ID = _ID;

@synthesize description = _description;

@synthesize components = _components;

@synthesize counter = _counter;

- (SCExampleClass *)buildWithError:(NSError **)error {
    return [[SCExampleClass alloc] initWithBuilder:self error:error];
}

@end
